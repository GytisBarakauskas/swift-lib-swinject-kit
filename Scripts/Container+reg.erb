<%
initializer_max_argument_count = 15
argument_max_count = 3

def generate_generics_signature(initializer_argument_count, argument_count)
    if initializer_argument_count + argument_count == 0
        return "<T>" 
    end

    if initializer_argument_count == 0 && argument_count == 1
        return "<T, A1>"
    end

    signature = "<T"
    signature += ", "
    signature += (1..initializer_argument_count + argument_count).each.collect { |i| "T#{i}" }.join(", ")
    signature += ", " if argument_count > 0
    signature += (1..argument_count).each.collect { |i| "A" + i.to_s }.join(", ")
    signature += ">"
    return signature
end

def generate_initializer_signature(initializer_argument_count, argument_count)
    if initializer_argument_count + argument_count == 0
        return "(()) -> T" 
    end

    if initializer_argument_count == 0 && argument_count == 1
        return "((A1)) -> T"
    end

    signature = "(("
    signature += (1..initializer_argument_count + argument_count).each.collect { |i| "T#{i}" }.join(", ")
    signature += ")) -> T"
    return signature
end

def generate_arguments_signature(argument_count)
    return ", " if argument_count == 0
    return ", argument a1: A1.Type, " if argument_count == 1
    signature = ", arguments a1: A1.Type, "
    signature += (2..argument_count).each.collect { |i| "_ a#{i}: A#{i}.Type" }.join(", ")
    signature += ", "
    return signature
end

def generate_body(argument_count)
    if argument_count == 0
        return "autoregister(T.self, initializer: initializer).inObjectScope(scope)"
    elsif  argument_count == 1
        return "autoregister(T.self, argument: a1, initializer: initializer).inObjectScope(scope)"
    else
        arguments = (1..argument_count).each.collect { |i| "a#{i}" }.join(", ")
        return "autoregister(T.self, arguments: #{arguments}, initializer: initializer).inObjectScope(scope)"
    end
        
    return ", " if argument_count == 0
    return ", argument a1: A1, " if argument_count == 1
    signature = ", arguments a1: A1, "
    signature += (2..argument_count).each.collect { |i| "_ a#{i}: A#{i}" }.join(", ")
    signature += ", "
    return signature
end

initializer_argument_array = (0..initializer_max_argument_count).to_a
argument_array = (0..argument_max_count).to_a
%>
import Swinject
import SwinjectAutoregistration

public extension Swinject.Container {

<% initializer_argument_array.product(argument_array).each do |lookup_table|

generics_singature = generate_generics_signature(lookup_table[0], lookup_table[1])
initializer_signature = "(_ initializer: @escaping"
initializer_signature += generate_initializer_signature(lookup_table[0], lookup_table[1])
initializer_signature += generate_arguments_signature(lookup_table[1])
initializer_signature += "scope: ObjectScope) {"

function_signature = "func reg"
function_signature += generics_singature
function_signature += initializer_signature
function_body = generate_body(lookup_table[1])
%>
    <%= function_signature %>

        <%= generate_body(lookup_table[1])%>

    }

<% end %>
}
